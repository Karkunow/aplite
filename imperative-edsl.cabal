name:                imperative-edsl
version:             0.4.1
synopsis:            Deep embedding of imperative programs with code generation
description:         Deep embedding of imperative programs with code generation.
                     .
                     The main module for users who want to write imperative
                     programs is "Language.Embedded.Imperative" (and optionally
                     "Language.Embedded.CExp" which provides a simple expression
                     language).
                     .
                     Examples can be found in the @examples@ directory.
license:             BSD3
license-file:        LICENSE
author:              Anders Persson, Emil Axelsson, Markus Aronsson
maintainer:          emax@chalmers.se
copyright:           Copyright 2015 Anders Persson, Emil Axelsson, Markus Aronsson
homepage:            https://github.com/emilaxelsson/imperative-edsl
bug-reports:         https://github.com/emilaxelsson/imperative-edsl/issues
category:            Language
build-type:          Simple
cabal-version:       >=1.10

extra-source-files:
  examples/*.hs
  tests/*.hs

source-repository head
  type:     git
  location: git@github.com:emilaxelsson/imperative-edsl.git

Flag old-syntactic
  Description: Use syntactic < 2
  Default:     False

library
  exposed-modules:
    Control.Monads
    Haste.Aplite
    -- System.IO.Fake
    Language.Embedded.Traversal
    Language.Embedded.Imperative.Args
    Language.Embedded.Imperative.CMD
    Language.Embedded.Imperative.Frontend.General
    Language.Embedded.Imperative.Frontend
    Language.Embedded.Imperative
    Language.Embedded.Backend.JS
    Language.JS.Expression
    Language.Embedded.Expression

  other-modules:
    Language.Embedded.Imperative.Backend.JS
    Language.JS.Monad
    Language.JS.Syntax
    Language.JS.CompExp
    Language.JS.Print
    Language.JS.Export
    Language.JS.BinOps
      -- No need to export these since only the instances are interesting

  default-language: Haskell2010

  default-extensions:
    ConstraintKinds
    DefaultSignatures
    DeriveDataTypeable
    DeriveFoldable
    DeriveFunctor
    DeriveTraversable
    FlexibleContexts
    FlexibleInstances
    GADTs
    GeneralizedNewtypeDeriving
    MultiParamTypeClasses
    PatternSynonyms
    Rank2Types
    RecordWildCards
    ScopedTypeVariables
    StandaloneDeriving
    TypeFamilies
    TypeOperators
    ViewPatterns

  other-extensions:
    PolyKinds
    UndecidableInstances

  build-depends:
    array,
    base >=4 && <5,
    constraints,
    containers,
    deepseq,
    exception-transformers,
    mtl,
    operational-alacarte < 0.2,
    tagged,
      -- tagged needed for GHC 7.6
    srcloc,
    time >= 1.5.0.1

  if impl(haste)
    build-depends:
      haste-lib  >= 0.5.4 && < 0.6,
      haste-prim >= 0.5.4 && < 0.6
  else
    build-depends:
      haste-compiler >= 0.5.4 && < 0.6

  if flag(old-syntactic)
    build-depends:
      syntactic < 2
  else
    build-depends:
      open-typerep >= 0.4,
      syntactic >= 3.2

  ghc-options:
    -Wall

  hs-source-dirs: src

test-suite Tests
  type: exitcode-stdio-1.0

  hs-source-dirs: tests examples

  main-is: Tests.hs

  default-language: Haskell2010

  build-depends:
    base,
    imperative-edsl,
    syntactic,
    tasty-quickcheck,
    tasty-th
